// AUTO GENERATED BY JNIGEN 0.14.2. DO NOT EDIT!

// ignore_for_file: annotate_overrides
// ignore_for_file: argument_type_not_assignable
// ignore_for_file: camel_case_extensions
// ignore_for_file: camel_case_types
// ignore_for_file: constant_identifier_names
// ignore_for_file: comment_references
// ignore_for_file: doc_directive_unknown
// ignore_for_file: file_names
// ignore_for_file: inference_failure_on_untyped_parameter
// ignore_for_file: invalid_internal_annotation
// ignore_for_file: invalid_use_of_internal_member
// ignore_for_file: library_prefixes
// ignore_for_file: lines_longer_than_80_chars
// ignore_for_file: no_leading_underscores_for_library_prefixes
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: only_throw_errors
// ignore_for_file: overridden_fields
// ignore_for_file: prefer_double_quotes
// ignore_for_file: unintended_html_in_doc_comment
// ignore_for_file: unnecessary_cast
// ignore_for_file: unnecessary_non_null_assertion
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: unused_element
// ignore_for_file: unused_field
// ignore_for_file: unused_import
// ignore_for_file: unused_local_variable
// ignore_for_file: unused_shown_name
// ignore_for_file: use_super_parameters

import 'dart:core' show Object, String, bool, double, int;
import 'dart:core' as core$_;

import 'package:jni/_internal.dart' as jni$_;
import 'package:jni/jni.dart' as jni$_;

/// from: `com.patrikszabo.flutter_native_localizations.FlutterNativeLocalizationsPlugin$Companion`
class FlutterNativeLocalizationsPlugin$Companion extends jni$_.JObject {
  @jni$_.internal
  @core$_.override
  final jni$_.JObjType<FlutterNativeLocalizationsPlugin$Companion> $type;

  @jni$_.internal
  FlutterNativeLocalizationsPlugin$Companion.fromReference(
    jni$_.JReference reference,
  ) : $type = type,
      super.fromReference(reference);

  static final _class = jni$_.JClass.forName(
    r'com/patrikszabo/flutter_native_localizations/FlutterNativeLocalizationsPlugin$Companion',
  );

  /// The type which includes information such as the signature of this class.
  static const nullableType =
      $FlutterNativeLocalizationsPlugin$Companion$NullableType();
  static const type = $FlutterNativeLocalizationsPlugin$Companion$Type();
  static final _id_new$ = _class.constructorId(
    r'(Lkotlin/jvm/internal/DefaultConstructorMarker;)V',
  );

  static final _new$ =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>,
              )
            >
          >('globalEnv_NewObject')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
            )
          >();

  /// from: `synthetic public void <init>(kotlin.jvm.internal.DefaultConstructorMarker defaultConstructorMarker)`
  /// The returned object must be released after use, by calling the [release] method.
  factory FlutterNativeLocalizationsPlugin$Companion(
    jni$_.JObject? defaultConstructorMarker,
  ) {
    final _$defaultConstructorMarker =
        defaultConstructorMarker?.reference ?? jni$_.jNullReference;
    return FlutterNativeLocalizationsPlugin$Companion.fromReference(
      _new$(
        _class.reference.pointer,
        _id_new$ as jni$_.JMethodIDPtr,
        _$defaultConstructorMarker.pointer,
      ).reference,
    );
  }
}

final class $FlutterNativeLocalizationsPlugin$Companion$NullableType
    extends jni$_.JObjType<FlutterNativeLocalizationsPlugin$Companion?> {
  @jni$_.internal
  const $FlutterNativeLocalizationsPlugin$Companion$NullableType();

  @jni$_.internal
  @core$_.override
  String get signature =>
      r'Lcom/patrikszabo/flutter_native_localizations/FlutterNativeLocalizationsPlugin$Companion;';

  @jni$_.internal
  @core$_.override
  FlutterNativeLocalizationsPlugin$Companion? fromReference(
    jni$_.JReference reference,
  ) => reference.isNull
      ? null
      : FlutterNativeLocalizationsPlugin$Companion.fromReference(
          reference,
        );
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<FlutterNativeLocalizationsPlugin$Companion?>
  get nullableType => this;

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode =>
      ($FlutterNativeLocalizationsPlugin$Companion$NullableType).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType ==
            ($FlutterNativeLocalizationsPlugin$Companion$NullableType) &&
        other is $FlutterNativeLocalizationsPlugin$Companion$NullableType;
  }
}

final class $FlutterNativeLocalizationsPlugin$Companion$Type
    extends jni$_.JObjType<FlutterNativeLocalizationsPlugin$Companion> {
  @jni$_.internal
  const $FlutterNativeLocalizationsPlugin$Companion$Type();

  @jni$_.internal
  @core$_.override
  String get signature =>
      r'Lcom/patrikszabo/flutter_native_localizations/FlutterNativeLocalizationsPlugin$Companion;';

  @jni$_.internal
  @core$_.override
  FlutterNativeLocalizationsPlugin$Companion fromReference(
    jni$_.JReference reference,
  ) => FlutterNativeLocalizationsPlugin$Companion.fromReference(
    reference,
  );
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<FlutterNativeLocalizationsPlugin$Companion?>
  get nullableType =>
      const $FlutterNativeLocalizationsPlugin$Companion$NullableType();

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode =>
      ($FlutterNativeLocalizationsPlugin$Companion$Type).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType ==
            ($FlutterNativeLocalizationsPlugin$Companion$Type) &&
        other is $FlutterNativeLocalizationsPlugin$Companion$Type;
  }
}

/// from: `com.patrikszabo.flutter_native_localizations.FlutterNativeLocalizationsPlugin`
class FlutterNativeLocalizationsPlugin extends jni$_.JObject {
  @jni$_.internal
  @core$_.override
  final jni$_.JObjType<FlutterNativeLocalizationsPlugin> $type;

  @jni$_.internal
  FlutterNativeLocalizationsPlugin.fromReference(
    jni$_.JReference reference,
  ) : $type = type,
      super.fromReference(reference);

  static final _class = jni$_.JClass.forName(
    r'com/patrikszabo/flutter_native_localizations/FlutterNativeLocalizationsPlugin',
  );

  /// The type which includes information such as the signature of this class.
  static const nullableType = $FlutterNativeLocalizationsPlugin$NullableType();
  static const type = $FlutterNativeLocalizationsPlugin$Type();
  static final _id_Companion = _class.staticFieldId(
    r'Companion',
    r'Lcom/patrikszabo/flutter_native_localizations/FlutterNativeLocalizationsPlugin$Companion;',
  );

  /// from: `static public final com.patrikszabo.flutter_native_localizations.FlutterNativeLocalizationsPlugin$Companion Companion`
  /// The returned object must be released after use, by calling the [release] method.
  static FlutterNativeLocalizationsPlugin$Companion get Companion =>
      _id_Companion.get(
        _class,
        const $FlutterNativeLocalizationsPlugin$Companion$Type(),
      );

  static final _id_new$ = _class.constructorId(
    r'(Landroid/content/Context;)V',
  );

  static final _new$ =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>,
              )
            >
          >('globalEnv_NewObject')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
            )
          >();

  /// from: `public void <init>(android.content.Context context)`
  /// The returned object must be released after use, by calling the [release] method.
  factory FlutterNativeLocalizationsPlugin(
    jni$_.JObject context,
  ) {
    final _$context = context.reference;
    return FlutterNativeLocalizationsPlugin.fromReference(
      _new$(
        _class.reference.pointer,
        _id_new$ as jni$_.JMethodIDPtr,
        _$context.pointer,
      ).reference,
    );
  }

  static final _id_getString = _class.instanceMethodId(
    r'getString',
    r'(Ljava/lang/String;)Ljava/lang/String;',
  );

  static final _getString =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
            )
          >();

  /// from: `public final java.lang.String getString(java.lang.String string)`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JString? getString(
    jni$_.JString string,
  ) {
    final _$string = string.reference;
    return _getString(
      reference.pointer,
      _id_getString as jni$_.JMethodIDPtr,
      _$string.pointer,
    ).object<jni$_.JString?>(const jni$_.JStringNullableType());
  }

  static final _id_getFormattedString = _class.instanceMethodId(
    r'getFormattedString',
    r'(Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/String;',
  );

  static final _getFormattedString =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<
                  (jni$_.Pointer<jni$_.Void>, jni$_.Pointer<jni$_.Void>)
                >,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
            )
          >();

  /// from: `public final java.lang.String getFormattedString(java.lang.String string, java.lang.Object[] objects)`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JString? getFormattedString(
    jni$_.JString string,
    jni$_.JArray<jni$_.JObject> objects,
  ) {
    final _$string = string.reference;
    final _$objects = objects.reference;
    return _getFormattedString(
      reference.pointer,
      _id_getFormattedString as jni$_.JMethodIDPtr,
      _$string.pointer,
      _$objects.pointer,
    ).object<jni$_.JString?>(const jni$_.JStringNullableType());
  }

  static final _id_getPlural = _class.instanceMethodId(
    r'getPlural',
    r'(Ljava/lang/String;I)Ljava/lang/String;',
  );

  static final _getPlural =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>, jni$_.Int32)>,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              int,
            )
          >();

  /// from: `public final java.lang.String getPlural(java.lang.String string, int i)`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JString? getPlural(
    jni$_.JString string,
    int i,
  ) {
    final _$string = string.reference;
    return _getPlural(
      reference.pointer,
      _id_getPlural as jni$_.JMethodIDPtr,
      _$string.pointer,
      i,
    ).object<jni$_.JString?>(const jni$_.JStringNullableType());
  }

  static final _id_getFormattedPlural = _class.instanceMethodId(
    r'getFormattedPlural',
    r'(Ljava/lang/String;I[Ljava/lang/Object;)Ljava/lang/String;',
  );

  static final _getFormattedPlural =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<
                  (
                    jni$_.Pointer<jni$_.Void>,
                    jni$_.Int32,
                    jni$_.Pointer<jni$_.Void>,
                  )
                >,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              int,
              jni$_.Pointer<jni$_.Void>,
            )
          >();

  /// from: `public final java.lang.String getFormattedPlural(java.lang.String string, int i, java.lang.Object[] objects)`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JString? getFormattedPlural(
    jni$_.JString string,
    int i,
    jni$_.JArray<jni$_.JObject> objects,
  ) {
    final _$string = string.reference;
    final _$objects = objects.reference;
    return _getFormattedPlural(
      reference.pointer,
      _id_getFormattedPlural as jni$_.JMethodIDPtr,
      _$string.pointer,
      i,
      _$objects.pointer,
    ).object<jni$_.JString?>(const jni$_.JStringNullableType());
  }

  static final _id_getStringArray = _class.instanceMethodId(
    r'getStringArray',
    r'(Ljava/lang/String;)[Ljava/lang/String;',
  );

  static final _getStringArray =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
            )
          >();

  /// from: `public final java.lang.String[] getStringArray(java.lang.String string)`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JArray<jni$_.JString>? getStringArray(
    jni$_.JString string,
  ) {
    final _$string = string.reference;
    return _getStringArray(
      reference.pointer,
      _id_getStringArray as jni$_.JMethodIDPtr,
      _$string.pointer,
    ).object<jni$_.JArray<jni$_.JString>?>(
      const jni$_.JArrayNullableType<jni$_.JString>(jni$_.JStringType()),
    );
  }

  static final _id_getText = _class.instanceMethodId(
    r'getText',
    r'(Ljava/lang/String;)Ljava/lang/CharSequence;',
  );

  static final _getText =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
            )
          >();

  /// from: `public final java.lang.CharSequence getText(java.lang.String string)`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JObject? getText(
    jni$_.JString string,
  ) {
    final _$string = string.reference;
    return _getText(
      reference.pointer,
      _id_getText as jni$_.JMethodIDPtr,
      _$string.pointer,
    ).object<jni$_.JObject?>(const jni$_.JObjectNullableType());
  }

  static final _id_hasResourceName = _class.instanceMethodId(
    r'hasResourceName',
    r'(Ljava/lang/String;Ljava/lang/String;)Z',
  );

  static final _hasResourceName =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<
                  (jni$_.Pointer<jni$_.Void>, jni$_.Pointer<jni$_.Void>)
                >,
              )
            >
          >('globalEnv_CallBooleanMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
            )
          >();

  /// from: `public final boolean hasResourceName(java.lang.String string, java.lang.String string1)`
  bool hasResourceName(
    jni$_.JString string,
    jni$_.JString string1,
  ) {
    final _$string = string.reference;
    final _$string1 = string1.reference;
    return _hasResourceName(
      reference.pointer,
      _id_hasResourceName as jni$_.JMethodIDPtr,
      _$string.pointer,
      _$string1.pointer,
    ).boolean;
  }

  static final _id_getLocales = _class.instanceMethodId(
    r'getLocales',
    r'()[Ljava/lang/String;',
  );

  static final _getLocales =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public final java.lang.String[] getLocales()`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JArray<jni$_.JString> getLocales() {
    return _getLocales(
      reference.pointer,
      _id_getLocales as jni$_.JMethodIDPtr,
    ).object<jni$_.JArray<jni$_.JString>>(
      const jni$_.JArrayType<jni$_.JString>(jni$_.JStringType()),
    );
  }

  static final _id_isRTL = _class.instanceMethodId(
    r'isRTL',
    r'()Z',
  );

  static final _isRTL =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallBooleanMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public final boolean isRTL()`
  bool isRTL() {
    return _isRTL(reference.pointer, _id_isRTL as jni$_.JMethodIDPtr).boolean;
  }
}

final class $FlutterNativeLocalizationsPlugin$NullableType
    extends jni$_.JObjType<FlutterNativeLocalizationsPlugin?> {
  @jni$_.internal
  const $FlutterNativeLocalizationsPlugin$NullableType();

  @jni$_.internal
  @core$_.override
  String get signature =>
      r'Lcom/patrikszabo/flutter_native_localizations/FlutterNativeLocalizationsPlugin;';

  @jni$_.internal
  @core$_.override
  FlutterNativeLocalizationsPlugin? fromReference(jni$_.JReference reference) =>
      reference.isNull
      ? null
      : FlutterNativeLocalizationsPlugin.fromReference(
          reference,
        );
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<FlutterNativeLocalizationsPlugin?> get nullableType => this;

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode => ($FlutterNativeLocalizationsPlugin$NullableType).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType ==
            ($FlutterNativeLocalizationsPlugin$NullableType) &&
        other is $FlutterNativeLocalizationsPlugin$NullableType;
  }
}

final class $FlutterNativeLocalizationsPlugin$Type
    extends jni$_.JObjType<FlutterNativeLocalizationsPlugin> {
  @jni$_.internal
  const $FlutterNativeLocalizationsPlugin$Type();

  @jni$_.internal
  @core$_.override
  String get signature =>
      r'Lcom/patrikszabo/flutter_native_localizations/FlutterNativeLocalizationsPlugin;';

  @jni$_.internal
  @core$_.override
  FlutterNativeLocalizationsPlugin fromReference(jni$_.JReference reference) =>
      FlutterNativeLocalizationsPlugin.fromReference(
        reference,
      );
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<FlutterNativeLocalizationsPlugin?> get nullableType =>
      const $FlutterNativeLocalizationsPlugin$NullableType();

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode => ($FlutterNativeLocalizationsPlugin$Type).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($FlutterNativeLocalizationsPlugin$Type) &&
        other is $FlutterNativeLocalizationsPlugin$Type;
  }
}
